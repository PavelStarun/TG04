import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, FSInputFile, CallbackQuery
from config import TOKEN, WEATHER_API_KEY
import sqlite3
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp
import logging
import keyboards as kb


bot = Bot(token=TOKEN)
dp = Dispatcher()


logging.basicConfig(level=logging.INFO)


class Form(StatesGroup):
    name = State()
    age = State()
    grade = State()

def init_db():
    conn = sqlite3.connect('school_data.db')
    cur = conn.cursor()

    cur.execute(
        '''CREATE TABLE IF NOT EXISTS students (
        id INTEGER PRIMARY KEY AUTOINCREMENT, 
        name TEXT NOT NULL, 
        age INTEGER NOT NULL,
        grade TEXT NOT NULL)
        ''')

    conn.commit()
    conn.close()


init_db()


@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —É—á–µ–Ω–∏–∫–æ–≤ —à–∫–æ–ª—ã. –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –º–µ–Ω—é.', reply_markup=kb.menu)


@dp.message(F.text == "üìö –ú–µ–Ω—é")
async def cmd_start(message: Message):
    await message.answer('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é')

@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def cmd_start(message: Message):
    await message.answer('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ö–æ–Ω—Ç–∞–∫—Ç—ã')

@dp.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_start(message: Message):
    await message.answer('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')


@dp.message(Command("links"))
async def links(message: Message):
    await message.answer('–†–∞–∑–≤–ª–µ–∫–∏ —Å–µ–±—è',reply_markup=kb.inline_menu)


dp.callback_query(F.data == '–ù–æ–≤–æ—Å—Ç–∏')
async def news(callback: CallbackQuery):
    await callback.answer("–ù–æ–≤–æ—Å—Ç–∏ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è", show_alert=True)
    await callback.message.edit_text('–ù–æ–≤–æ—Å—Ç–∏ –ø–æ–≥–æ–¥—ã', reply_markup=await kb.test_keyboard)


@dp.message(Command("help"))
async def help(message: Message):
    await message.answer("–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /sign_up\n"
                         "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤, –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /all\n"
                         "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help")



@dp.message(Command("sign_up"))
async def sign_up(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)

@dp.message(Form.name)
async def name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(f"{message.text}, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(Form.age)

@dp.message(Form.age)
async def age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?")
    await state.set_state(Form.grade)

@dp.message(Form.grade)
async def city(message: Message, state: FSMContext):
    await state.update_data(grade=message.text)
    user_data = await state.get_data()

    conn = sqlite3.connect('school_data.db')
    cur = conn.cursor()
    cur.execute(
        '''INSERT INTO students (name, age, grade) VALUES (?, ?, ?)''',
        (user_data['name'], user_data['age'], user_data['grade'])
    )
    conn.commit()
    conn.close()

    await message.answer(f"–°—Ç—É–¥–µ–Ω—Ç {user_data['name']} —Å –∫–ª–∞—Å—Å–∞ {user_data['grade']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")
    await state.clear()


@dp.message(Command("all"))
async def all_data(message: Message):
    conn = sqlite3.connect('school_data.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM students")
    all_students = cur.fetchall()
    conn.close()

    if all_students:
        response = "–î–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤:\n"
        for student in all_students:
            response += f"ID: {student[0]}, –ò–º—è: {student[1]}, –í–æ–∑—Ä–∞—Å—Ç: {student[2]}, –ö–ª–∞—Å—Å: {student[3]}\n"
        await message.answer(response)
    else:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.")


async def TG03dz():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(TG03dz())